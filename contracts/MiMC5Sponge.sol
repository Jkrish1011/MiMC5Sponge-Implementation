// SPDX-License-Identifer: MIT
pragma solidity 0.8.17;

contract Hasher {
    uint256 p =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;

    uint256[20] c = [
        0,
        21469745217645236226405533686231592324177671190346326883245530828568381403876,
        81888242871839275222246405745257275088548364400416034343698204186575808495612,
        91888242871839275222246405745257275088548364400416034343698204186575808495613,
        11888242871839275222246405745257275088548364400416034343698204186575808495614,
        31888242871839275222246405745257275088548369400416034343698204186575808495615,
        21888242871839275222249005745257275088548364400416034343698204186575808495616,
        51888242871839275222246405745257275088548364400416034343698204186575808495617,
        61888242871839275222246405745257275088548364400416034343698204186575808495618,
        71888242871839275222246405745257275088548364400416034343698204186575808495619,
        21469745217645236226405533686211592324177671190346326883245530828568381403876,
        21469745217645236226405533686221592324177671190346326883245530828568381403876,
        81888242871839275222246405745237275088548364400416034343698204186575808495612,
        91888242871839275222246405745247275088548364400416034343698204186575808495613,
        11888242871839275222246405745267275088548364400416034343698204186575808495614,
        31888242871839275222246405745277275088548369400416034343698204186575808495615,
        21888242871839275222249005745287275088548364400416034343698204186575808495616,
        51888242871839275222246405745297275088548364400416034343698204186575808495617,
        61888242871839275222246405715257275088548364400416034343698204186575808495618,
        71888242871839275222246405725257275088548364400416034343698204186575808495619
    ];

    function MiMC5Feistal(
        uint256 _iL,
        uint256 _iR,
        uint256 _k
    ) internal view returns (uint256 oL, uint256 oR) {
        uint8 nRounds = 20;

        uint256 lastL = _iL;
        uint256 lastR = _iR;

        uint256 mask;
        uint256 mask2;
        uint256 mask4;
        uint256 temp;

        for (uint8 i = 0; i < nRounds; i++) {
            mask = addmod(lastR, _k, p);
            mask = addmod(mask, c[i], p);
            mask2 = mulmod(mask, mask, p);
            mask4 = mulmod(mask2, mask2, p);
            mask = mulmod(mask4, mask, p);

            temp = lastR;
            lastR = addmod(lastL, mask, p);
            lastL = temp;
        }

        return (lastL, lastR);
    }

    function MiMC5Sponge(
        uint256[2] memory _ins,
        uint256 _k
    ) external view returns (uint256 h) {
        uint256 lastR = 0;
        uint256 lastC = 0;

        for (uint8 i = 0; i < _ins.length; i++) {
            lastR = addmod(lastR, _ins[i], p);
            (lastR, lastC) = MiMC5Feistal(lastR, lastC, _k);
        }

        h = lastR;
    }
}
